{"version":3,"sources":["../src/paginate.js"],"names":[],"mappings":";;;;;kBAIwB;;;;;AAAT,SAAS,UAAT,CAAqB,MAArB,EAA6B;AAC1C,MAAM,QAAQ,EAAR;;;AADoC,MAIlC,UAAgE,OAAhE,QAJkC;MAIzB,WAAuD,OAAvD,SAJyB;MAIf,qBAA6C,OAA7C,mBAJe;MAIK,uBAAyB,OAAzB,qBAJL;;;AAM1C,MAAI,WAAW,kBAAX,EAA+B;AACjC,SAAK,IAAI,QAAQ,CAAR,EAAW,QAAQ,OAAR,EAAiB,OAArC,EAA8C;AAC5C,YAAM,IAAN,CAAW,EAAE,MAAM,MAAN,EAAc,MAAM,QAAQ,CAAR,EAAW,UAAU,aAAa,KAAb,EAAtD,EAD4C;KAA9C;;AAIA,WAAO,KAAP,CALiC;GAAnC;;AAQA,MAAI,WAAY,qBAAqB,CAArB,CAd0B;AAe1C,MAAI,YAAa,qBAAqB,QAArB,CAfyB;;AAiB1C,MAAI,WAAW,UAAU,qBAAqB,CAArB,EAAwB;AAC/C,gBAAY,UAAU,QAAV,CADmC;AAE/C,eAAW,qBAAqB,SAArB,CAFoC;GAAjD,MAGO,IAAI,WAAW,qBAAqB,CAArB,EAAwB;AAC5C,eAAW,QAAX,CAD4C;AAE5C,gBAAY,qBAAqB,QAArB,CAFgC;GAAvC;;AAKP,MAAI,kBAAJ,CAzB0C;AA0B1C,OAAK,IAAI,SAAQ,CAAR,EAAW,SAAQ,OAAR,EAAiB,QAArC,EAA8C;AAC5C,QAAM,OAAO,SAAQ,CAAR,CAD+B;AAE5C,QAAM,WAAW,EAAE,MAAM,MAAN,EAAc,UAAhB,EAAsB,UAAU,aAAa,MAAb,EAA3C,CAFsC;;AAI5C,QACE,QAAQ,oBAAR,IACA,OAAO,UAAU,oBAAV,IACN,MAAC,IAAS,WAAW,QAAX,IAAyB,UAAS,WAAW,SAAX,EAC7C;AACA,YAAM,IAAN,CAAW,QAAX,EADA;AAEA,eAFA;KAJF;;AASA,QAAM,YAAY,MAAM,MAAM,MAAN,GAAe,CAAf,CAAlB,CAbsC;AAc5C,QAAI,cAAc,SAAd,EAAyB;AAC3B,kBAAY,EAAE,MAAM,OAAN,EAAd,CAD2B;AAE3B,YAAM,IAAN,CAAW,SAAX,EAF2B;KAA7B;GAdF;;AAoBA,SAAO,KAAP,CA9C0C;CAA7B","file":"paginate.js","sourcesContent":["// The generic, plain 'ol JS pagination algorithm\n// returns an array of objects representing something like\n// [ [1] [2] [...] [6] [7] [8] [...] [167] [168] ]\n\nexport default function pagination (params) {\n  const items = [];\n\n  // these are all Numbers\n  const { pageNum, selected, pageRangeDisplayed, marginPagesDisplayed } = params;\n\n  if (pageNum <= pageRangeDisplayed) {\n    for (let index = 0; index < pageNum; index++) {\n      items.push({ type: \"page\", page: index + 1, selected: selected === index });\n    }\n\n    return items;\n  }\n\n  let leftSide = (pageRangeDisplayed / 2);\n  let rightSide = (pageRangeDisplayed - leftSide);\n\n  if (selected > pageNum - pageRangeDisplayed / 2) {\n    rightSide = pageNum - selected;\n    leftSide = pageRangeDisplayed - rightSide;\n  } else if (selected < pageRangeDisplayed / 2) {\n    leftSide = selected;\n    rightSide = pageRangeDisplayed - leftSide;\n  }\n\n  let breakView;\n  for (let index = 0; index < pageNum; index++) {\n    const page = index + 1;\n    const pageView = { type: \"page\", page, selected: selected === index };\n\n    if (\n      page <= marginPagesDisplayed ||\n      page > pageNum - marginPagesDisplayed ||\n      ((index >= selected - leftSide) && (index <= selected + rightSide))\n    ) {\n      items.push(pageView);\n      continue;\n    }\n\n    const lastValue = items[items.length - 1];\n    if (lastValue !== breakView) {\n      breakView = { type: \"break\" };\n      items.push(breakView);\n    }\n  }\n\n  return items;\n}\n"]}